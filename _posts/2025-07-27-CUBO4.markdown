---
layout: post
title: "Mathbox Cube"
date: 2025-07-20
---
CUBO4

 <script>
      var mathbox = MathBox.mathBox({
        plugins: ["core", "controls", "cursor", "mathbox"],
        controls: {
          // Orbit controls, i.e. Euler angles, with gimbal lock
          klass: THREE.OrbitControls,

          // Trackball controls, i.e. Free quaternion rotation
          //klass: THREE.TrackballControls,
        },
      });
      if (mathbox.fallback) throw "WebGL not supported";

      var three = mathbox.three;
      three.renderer.setClearColor(new THREE.Color(0xffffff), 1.0);
  
      var camera =
      mathbox
      .camera({
        proxy: true,
        position: [0, 0, 3],
      });

          // 2D cartesian
    var view =
      mathbox
      .cartesian({
        range: [[-2, 2], [-1, 1], [-1, 1]],
        scale: [2, 1, 1],
      });

    // Axes + grid
    view
      .axis({
        axis: 1,
        width: 3,
      })
      .axis({
        axis: 2,
        width: 3,
      })
      .grid({
        width: 2,
        divideX: 20,
        divideY: 10,
      });

      // Make axes black
    mathbox.select('axis').set('color', 'black');

      // Calibrate focus distance for units
    mathbox.set('focus', 3);

  /*
      // Add some data
    var data =
      view
      .interval({
        expr: function (emit, x, i, t) {
          emit(x, Math.sin(x + t));
        },
        width: 64,
        channels: 2,
      });

    // Draw a curve
    var curve =
      view
      .line({
        width: 5,
        color: '#3090FF',
      });

      var points =
  view.point({
    size: 8,
    color: '#3090FF',
  });
*/

    var data1 =
      view
      .interval({
        expr: function (emit, x, i, t) {
          emit(x, Math.sin(x + t));
        },
        width: 2,
        channels: 2,
      });

      var points1 =
  view.point({
    size: 8,
    color: '#50A000',
  });

      var data2 =
      view
      .interval({
        expr: function (emit, x, i, t) {
         const phi = x * 2 * Math.PI;
          emit(Math.cos(t+phi), Math.sin(t+phi), 0);
        },
        width: 64,
        channels: 3,
      });

      var points2 =
  view.point({
    size: 8,
    color: '#50A000',
  });

        var data4 =
      view
      .interval({
        expr: function (emit, x, i, t) {
         const phi = x * 2 * Math.PI;
         const theta = Math.PI/4;
          emit(Math.sin(theta)*Math.cos(t+phi), Math.sin(theta)*Math.sin(t+phi), Math.cos(theta));
        },
        width: 64,
        channels: 3,
      });

      var points4 =
  view.point({
    size: 8,
    color: '#50A000',
  });

          var data5 =
      view
      .area({
        expr: function (emit, u, v, i, j, t) {
          const theta = u * Math.PI;       // [0, π]
          const phi = v * 2 * Math.PI;     // [0, 2π]
          const r = 1;

          const x = r * Math.sin(theta) * Math.cos(phi+t);
          const y = r * Math.sin(theta) * Math.sin(phi+t);
          const z = r * Math.cos(theta);
          emit(x, y, z);
        },
        width: 32,
        height: 16,
        channels: 3,
      });

      var points5 =
  view.point({
    size: 8,
    color: '#50A000',
  });

        var data3 =
      view
      .interval({
        expr: function (emit, x, i, t) {
          emit(0, 0, Math.sin(t));
        },
        width: 1,
        channels: 3,
      });

      var points3 =
  view.point({
    size: 8,
    color: '#50A000',
  });
  
  /*
      var vector =
  view.interval({
    expr: function (emit, x, i, t) {
      emit(x, 0);
      emit(x, -Math.sin(x + t));
    },
    width: 64,
    channels: 2,
    items: 2,
  })
  .vector({
    end: true,
    width: 5,
    color: '#50A000',
  });
*/

       var scale =
  view.scale({
    divide: 10,
  });

      var ticks =
  view.ticks({
    width: 5,
    size: 15,
    color: 'black',
  });

      var format =
  view.format({
    digits: 2,
    weight: 'bold',
  });

      var labels =
  view.label({
    color: 'red',
    zIndex: 1,
  });

</script>
